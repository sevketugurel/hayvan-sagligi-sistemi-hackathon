import React, { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './TurkeyDiseaseMap.css';

// Leaflet ikon hatası için düzeltme
import icon from 'leaflet/dist/images/marker-icon.png';
import iconShadow from 'leaflet/dist/images/marker-shadow.png';

// Harita ikon sorunu düzeltmesi
const DefaultIcon = L.icon({
  iconUrl: icon,
  shadowUrl: iconShadow,
  iconSize: [25, 41],
  iconAnchor: [12, 41]
});

L.Marker.prototype.options.icon = DefaultIcon;

// Türkiye'nin 81 ilinin koordinatları
export const TURKEY_CITIES = [
  { name: "Adana", lat: 37.0000, lng: 35.3213 },
  { name: "Adıyaman", lat: 37.7648, lng: 38.2786 },
  { name: "Afyonkarahisar", lat: 38.7507, lng: 30.5567 },
  { name: "Ağrı", lat: 39.7191, lng: 43.0503 },
  { name: "Amasya", lat: 40.6499, lng: 35.8353 },
  { name: "Ankara", lat: 39.9208, lng: 32.8541 },
  { name: "Antalya", lat: 36.8841, lng: 30.7056 },
  { name: "Artvin", lat: 41.1828, lng: 41.8183 },
  { name: "Aydın", lat: 37.8560, lng: 27.8416 },
  { name: "Balıkesir", lat: 39.6484, lng: 27.8826 },
  { name: "Bartın", lat: 41.6344, lng: 32.3375 },
  { name: "Batman", lat: 37.8812, lng: 41.1351 },
  { name: "Bayburt", lat: 40.2552, lng: 40.2249 },
  { name: "Bilecik", lat: 40.1451, lng: 29.9834 },
  { name: "Bingöl", lat: 39.0626, lng: 40.7696 },
  { name: "Bitlis", lat: 38.4006, lng: 42.1095 },
  { name: "Bolu", lat: 40.7351, lng: 31.6082 },
  { name: "Burdur", lat: 37.7193, lng: 30.2913 },
  { name: "Bursa", lat: 40.1885, lng: 29.0610 },
  { name: "Çanakkale", lat: 40.1553, lng: 26.4142 },
  { name: "Çankırı", lat: 40.6013, lng: 33.6134 },
  { name: "Çorum", lat: 40.5506, lng: 34.9556 },
  { name: "Denizli", lat: 37.7765, lng: 29.0864 },
  { name: "Diyarbakır", lat: 37.9144, lng: 40.2306 },
  { name: "Düzce", lat: 40.8438, lng: 31.1565 },
  { name: "Edirne", lat: 41.6818, lng: 26.5623 },
  { name: "Elazığ", lat: 38.6810, lng: 39.2264 },
  { name: "Erzincan", lat: 39.7500, lng: 39.5000 },
  { name: "Erzurum", lat: 39.9000, lng: 41.2700 },
  { name: "Eskişehir", lat: 39.7767, lng: 30.5206 },
  { name: "Gaziantep", lat: 37.0662, lng: 37.3833 },
  { name: "Giresun", lat: 40.9128, lng: 38.3895 },
  { name: "Gümüşhane", lat: 40.4386, lng: 39.5086 },
  { name: "Hakkari", lat: 37.5783, lng: 43.7408 },
  { name: "Hatay", lat: 36.4018, lng: 36.3498 },
  { name: "Iğdır", lat: 39.8880, lng: 44.0048 },
  { name: "Isparta", lat: 37.7648, lng: 30.5566 },
  { name: "İstanbul", lat: 41.0082, lng: 28.9784 },
  { name: "İzmir", lat: 38.4192, lng: 27.1287 },
  { name: "Kahramanmaraş", lat: 37.5753, lng: 36.9228 },
  { name: "Karabük", lat: 41.2061, lng: 32.6204 },
  { name: "Karaman", lat: 37.1759, lng: 33.2287 },
  { name: "Kars", lat: 40.6013, lng: 43.0975 },
  { name: "Kastamonu", lat: 41.3766, lng: 33.7765 },
  { name: "Kayseri", lat: 38.7312, lng: 35.4787 },
  { name: "Kırıkkale", lat: 39.8468, lng: 33.5153 },
  { name: "Kırklareli", lat: 41.7380, lng: 27.2268 },
  { name: "Kırşehir", lat: 39.1425, lng: 34.1709 },
  { name: "Kilis", lat: 36.7184, lng: 37.1212 },
  { name: "Kocaeli", lat: 40.8533, lng: 29.8815 },
  { name: "Konya", lat: 37.8667, lng: 32.4833 },
  { name: "Kütahya", lat: 39.4167, lng: 29.9833 },
  { name: "Malatya", lat: 38.3552, lng: 38.3095 },
  { name: "Manisa", lat: 38.6191, lng: 27.4289 },
  { name: "Mardin", lat: 37.3212, lng: 40.7245 },
  { name: "Mersin", lat: 36.8000, lng: 34.6333 },
  { name: "Muğla", lat: 37.2153, lng: 28.3636 },
  { name: "Muş", lat: 38.9462, lng: 41.7539 },
  { name: "Nevşehir", lat: 38.6939, lng: 34.6857 },
  { name: "Niğde", lat: 37.9667, lng: 34.6833 },
  { name: "Ordu", lat: 40.9839, lng: 37.8764 },
  { name: "Osmaniye", lat: 37.0742, lng: 36.2478 },
  { name: "Rize", lat: 41.0201, lng: 40.5234 },
  { name: "Sakarya", lat: 40.7731, lng: 30.3943 },
  { name: "Samsun", lat: 41.2867, lng: 36.3300 },
  { name: "Siirt", lat: 37.9333, lng: 41.9500 },
  { name: "Sinop", lat: 42.0231, lng: 35.1531 },
  { name: "Sivas", lat: 39.7477, lng: 37.0179 },
  { name: "Şanlıurfa", lat: 37.1674, lng: 38.7955 },
  { name: "Şırnak", lat: 37.5164, lng: 42.4611 },
  { name: "Tekirdağ", lat: 40.9833, lng: 27.5167 },
  { name: "Tokat", lat: 40.3167, lng: 36.5500 },
  { name: "Trabzon", lat: 41.0000, lng: 39.7333 },
  { name: "Tunceli", lat: 39.1079, lng: 39.5401 },
  { name: "Uşak", lat: 38.6823, lng: 29.4082 },
  { name: "Van", lat: 38.4891, lng: 43.4089 },
  { name: "Yalova", lat: 40.6500, lng: 29.2667 },
  { name: "Yozgat", lat: 39.8181, lng: 34.8147 },
  { name: "Zonguldak", lat: 41.4564, lng: 31.7987 }
];

// İl ismine göre koordinatları bulan yardımcı fonksiyon
export const findCityCoordinates = (cityName) => {
  const city = TURKEY_CITIES.find(city => city.name === cityName);
  if (city) {
    return [city.lat, city.lng];
  }
  return [39.50, 35.24]; // Varsayılan Türkiye merkezi
};

const TurkeyDiseaseMap = ({ diseaseOutbreaks = [], onRegionClick, onAddOutbreak }) => {
  // Harita için DOM referansı
  const mapRef = useRef(null);
  // Leaflet harita instance'ı
  const mapInstanceRef = useRef(null);
  // Tüm marker'ları tutacak bir layer grubu
  const markersLayerRef = useRef(null);
  // İl markerları için layer grubu
  const cityMarkersLayerRef = useRef(null);

  // Hastalık durumlarına göre renkler
  const statusColors = {
    'aktif': '#f44336',
    'kontrol altında': '#ff9800',
    'azalıyor': '#4caf50',
    'default': '#3388ff'
  };

  // Marker büyüklüğünü vaka sayısına göre hesapla (min 8, max 25)
  const calculateRadius = (count) => {
    if (!count) return 8;
    return Math.min(Math.max(count / 2, 8), 25);
  };

  // Haritayı bir kere oluştur
  useEffect(() => {
    if (mapRef.current && !mapInstanceRef.current) {
      // Harita oluştur
      const map = L.map(mapRef.current).setView([39.50, 35.24], 6);

      // Harita katmanını ekle
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Tıklama olayını dinle
      map.on('click', (e) => {
        if (onRegionClick) {
          onRegionClick({
            name: 'Seçilen Bölge',
            coordinates: [e.latlng.lat, e.latlng.lng]
          });
        }
      });

      // Marker'lar için bir layer grubu oluştur
      markersLayerRef.current = L.layerGroup().addTo(map);

      // İl marker'ları için layer grubu
      cityMarkersLayerRef.current = L.layerGroup().addTo(map);

      // Türkiye illerini haritaya ekle
      TURKEY_CITIES.forEach(city => {
        // Küçük bir daire marker ekle
        const cityMarker = L.circleMarker(
          [city.lat, city.lng],
          {
            radius: 3,
            fillColor: '#2196F3',
            color: '#2196F3',
            weight: 1,
            opacity: 0.6,
            fillOpacity: 0.4
          }
        );

        // İl adını tooltip olarak ekle
        cityMarker.bindTooltip(city.name);

        // Tıklama olayını ekle
        cityMarker.on('click', () => {
          if (onRegionClick) {
            onRegionClick({
              name: city.name,
              coordinates: [city.lat, city.lng]
            });
          }
        });

        // İl marker'ını layer grubuna ekle
        cityMarker.addTo(cityMarkersLayerRef.current);
      });

      // Haritayı referansta sakla
      mapInstanceRef.current = map;
    }

    // Komponent unmount edildiğinde haritayı temizle
    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, [onRegionClick]);

  // Hastalık verisi değiştiğinde marker'ları güncelle
  useEffect(() => {
    // Eğer harita yoksa çık
    if (!mapInstanceRef.current || !markersLayerRef.current) return;

    // Tüm mevcut marker'ları temizle
    markersLayerRef.current.clearLayers();

    // Hastalık verisi varsa marker'ları ekle
    if (diseaseOutbreaks && diseaseOutbreaks.length > 0) {
      diseaseOutbreaks.forEach(outbreak => {
        // Marker rengi
        const color = statusColors[outbreak.status] || statusColors.default;

        // Koordinatları belirle
        let coordinates;

        // Eğer özel koordinatlar varsa onları kullan
        if (outbreak.coordinates && breakout.coordinates.length === 2) {
          coordinates = [outbreak.coordinates[1], breakout.coordinates[0]];
        } else if (outbreak.location) {
          // İl adı varsa, o ilin koordinatlarını bul
          const cityCoords = findCityCoordinates(outbreak.location);
          coordinates = [cityCoords[0], cityCoords[1]];
        } else {
          // Varsayılan merkez
          coordinates = [39.50, 35.24];
        }

        // Dairesel marker ekle
        const circle = L.circleMarker(
          coordinates,
          {
            radius: calculateRadius(outbreak.count),
            fillColor: color,
            color: color,
            weight: 1,
            opacity: 1,
            fillOpacity: 0.8
          }
        );

        // Popup içeriği
        const popupContent = `
          <div class="leaflet-popup-custom">
            <h3>${outbreak.diseaseName}</h3>
            <p><strong>Hayvan Türü:</strong> ${outbreak.animalType}</p>
            <p><strong>Vaka Sayısı:</strong> ${outbreak.count}</p>
            <p><strong>Durum:</strong> ${outbreak.status}</p>
            <p><strong>Tarih:</strong> ${outbreak.date}</p>
            <p><strong>Konum:</strong> ${outbreak.location || 'Belirtilmemiş'}</p>
            <p>${outbreak.description || ''}</p>
          </div>
        `;

        // Tooltip içeriği
        const tooltipContent = `
          <div>
            <strong>${outbreak.diseaseName}</strong><br />
            ${outbreak.animalType}: ${outbreak.count} vaka<br />
            Durum: ${outbreak.status}<br />
            Konum: ${outbreak.location || 'Belirtilmemiş'}
          </div>
        `;

        // Popup ve tooltip ekle
        circle.bindPopup(popupContent);
        circle.bindTooltip(tooltipContent);

        // Marker'ı layer grubuna ekle
        circle.addTo(markersLayerRef.current);
      });
    }
  }, [diseaseOutbreaks, statusColors]);

  return (
    <div className="turkey-disease-map-container">
      <div className="map-header">
        <h3>Salgın Hastalık Haritası</h3>
        {onAddOutbreak && (
          <button
            className="add-disease-button"
            onClick={onAddOutbreak}
          >
            Yeni Vaka Ekle
          </button>
        )}
      </div>

      <div
        ref={mapRef}
        style={{ width: '100%', height: '400px', borderRadius: '8px' }}
      ></div>

      <div className="map-legend">
        <strong>Salgın Hastalık Haritası</strong>
      </div>
    </div>
  );
};

export default TurkeyDiseaseMap; 